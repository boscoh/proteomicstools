[{'category': '', 'index': False, 'subpages': [], 'target': u'readme.html', 'title': '', 'url': u'readme.html', 'checksum': '\xdc\\\xd5\x0e\xe4\xb6\x98\x98\xfa\xce\xc3-\xd1Q\xd8\x9d', 'rel_site_url': '.', 'excerpt': u'tppit tppit is a Python module that wraps the Transatlantic Proteomics Pipeline (TPP). The TPP combines a number of tools that convert shotgun massspec experimental data into peptides and protein identifications, and in some cases, even quantification. However, these tools have inconsistent interfaces and requires a bit of glue to ...', 'modified': 1379054679.0, 'filename': '/Users/bosco/Projects/tppit/readme.md', 'content': u'<h1>tppit</h1>\n<p><code>tppit</code> is a Python module that wraps the Transatlantic Proteomics Pipeline (TPP).</p>\n<p>The TPP combines a number of tools that convert shotgun massspec experimental data into peptides and protein identifications, and in some cases, even quantification. </p>\n<p>However, these tools have inconsistent interfaces and requires a bit of glue to tie them together. <code>tppit</code> wraps these command-line tools so that a consistent interface can be run in a automated workflow.</p>\n<h2>Typical Protein Identification workflow</h2>\n<ol>\n<li>\n<p><code>msconvert</code> converts raw mass-spec data into the standard <code>mzXML</code>/<code>mzML</code> formats.</p>\n</li>\n<li>\n<p><code>tandem</code> is one (of many) search engines that matches massspec spectra to a database of candidate peptides (typically given as a fasta file of protein sequences with digestion enzyme).</p>\n</li>\n<li>\n<p><code>PeptideProphetParser</code> takes a set of spectrum-peptide matches with given expectations (in <code>.pep.xml</code> format) and assigns probabilities to the peptides by assuming a bi-modal frequency distribution of  expectations, corresponding to incorrect/correct matches.</p>\n</li>\n<li>\n<p><code>ProteinProphetParse</code> attempts to find a minimal grouping of proteins using parsimony based on the number of unique peptides in each proteins and the probabilities of each peptide.</p>\n</li>\n</ol>\n<h2>Why Python?</h2>\n<p>Doing this analysis means you will be processing a lot of files, and all of them will be interrelated in a lot of fiddly ways. Python is great at handling these details.</p>\n<p>First load the module:</p>\n<div class="codehilite"><pre>import tppit\n</pre></div>\n\n\n<p>Now <code>tppit</code> will search for the TPP programs in the system path, but you can always specify it directly:</p>\n<div class="codehilite"><pre>tppit.other_binary_dirs.append(&#39;/usr/local/tpp/bin&#39;)\n</pre></div>\n\n\n<h2>Matching spectra to peptides</h2>\n<p>Let\'s say you have some MS/MS spectra in the form of <code>mzXML</code> files in the <code>example</code> directory: </p>\n<div class="codehilite"><pre>mzxmls = [&#39;example/xtandem/Seq2328{}_E1O1.mzXML&#39;.format(i) for i in [2,3,4]]\n</pre></div>\n\n\n<p>You have some candidate proteins in: </p>\n<div class="codehilite"><pre>fasta = &#39;example/xtandem/orf_trans.fasta&#39;\n</pre></div>\n\n\n<p>Then run the search-engine provided by the TPP <code>x!tandem</code> with:</p>\n<div class="codehilite"><pre>for mzxml in mzxmls:\n  tppit.xtandem_match_spectra(mzxml, fasta)\n</pre></div>\n\n\n<p>The resultant spectrum-peptide matches are saved in:</p>\n<div class="codehilite"><pre>tandems = [tppit.change_ext(m, &#39;.tandem&#39;) for m in mzxmls]\n</pre></div>\n\n\n<h2>Converting to .pep.xml for further processing</h2>\n<p>Okay so you have a set of spectrum-peptide matches. For more TPP goodness, they need to be converted to <code>.pep.xml</code> format.</p>\n<p>Let\'s say they are in the form of <code>.tandem</code> files as above. We need to convert them to <code>.pep.xml</code> files:</p>\n<div class="codehilite"><pre>for tandem, pepxml in zip(tandems, pepxmls):\n  tppit.tandem2pepxml(tandem, pepxml)\npepxmls = [t + &#39;.pep.xml&#39; for t in tandems]\n</pre></div>\n\n\n<p>As another example, there are some mascot <code>.dat</code> files in the examples:</p>\n<div class="codehilite"><pre>mascots = [&#39;example/mascot/F02204{}.dat&#39;.format(i) for i in [3, 5]]\n</pre></div>\n\n\n<p>Now the conversion of mascot files to <code>.pep.xml</code> will require the sequence database, so:</p>\n<div class="codehilite"><pre>fasta_db = &#39;../db/HUMAN.fasta&#39;\n</pre></div>\n\n\n<p>Now run the translator:</p>\n<div class="codehilite"><pre>for mascot, pepxml in zip(mascots, pepxmls):\n  tppit.mascot2pepxml(mascot, fasta_db, pepxml)\npepxmls = [tppit.change_ext(m, &#39;.pep.xml&#39;) for m in mascots]\n</pre></div>\n\n\n<p>So finally, let\'s predict the proteins:</p>\n<div class="codehilite"><pre>protxml = &#39;example/xtandem/interact.prot.xml&#39;\ntppit.resolve_proteins(pepxmls, protxml)\n</pre></div>\n\n\n<p>The function <code>resolve_proteins</code> will:</p>\n<ol>\n<li>combine all the <code>.pep.xml</code> files with <code>InteractParser</code></li>\n<li>generate peptie probabilities with <code>PeptideProphetParser</code> </li>\n<li>generate parsimony protein lists with <code>ProteinProphetParser</code></li>\n</ol>', 'sort_key': None, 'max_subpages': None, 'template': 'default.haml', 'sort_reverse': True, 'date': datetime.datetime(2013, 9, 13, 0, 0), 'slug': u'readme'}]